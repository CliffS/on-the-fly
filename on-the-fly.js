// Generated by CoffeeScript 2.3.0
(function() {
  /*
   * Generic server for file conversion on the fly
   */
  var Path, bunyan, coffee, etag, fs, http, less, log, md, server, url;

  http = require('http');

  url = require('url');

  fs = require('fs');

  less = require('less');

  Path = require('path');

  md = require('marked');

  coffee = require('coffeescript');

  etag = require('etag');

  require('systemd');

  require('autoquit');

  bunyan = require('bunyan');

  log = bunyan.createLogger({
    name: 'on-the-fly',
    streams: [
      {
        type: 'rotating-file',
        period: '1w',
        count: 4,
        path: '/var/log/on-the-fly.log',
        level: 'debug'
      }
    ]
  });

  server = http.createServer(function(req, res) {
    var file, match, parsedurl, pretty, suffix, tag;
    parsedurl = url.parse(req.url, true);
    file = parsedurl.pathname;
    log.info(file);
    pretty = parsedurl.query.pretty != null;
    if (!(match = file.match(/\.(\w+)$/))) {
      res.writeHead(501, 'Not Implemented');
      return res.end(`No filename suffix found in "${file}"`);
    }
    suffix = match[1];
    try {
      tag = etag(fs.statSync(file));
    } catch (error) {
      res.writeHead(404, 'File not found');
      return res.end(`${file} not found`);
    }
    res.setHeader('Etag', tag);
    if (req.headers['if-none-match'] === tag) {
      res.writeHead(304, 'Not Modified');
      return res.end();
    } else {
      return fs.readFile(file, 'utf-8', function(err, data) {
        var result;
        if (err) {
          log.error(err);
          res.writeHead(404, 'File not found');
          return res.end(`${err.message}`);
        } else {
          switch (suffix) {
            case 'less':
              return less.render(data, {
                paths: [Path.dirname(file)],
                compress: !pretty
              }, function(e, output) {
                if (e) {
                  res.writeHead(500, 'Syntax Error');
                  return res.end(e.message);
                } else {
                  res.writeHead(200, {
                    'Content-Type': 'text/css; charset=utf-8'
                  });
                  return res.end(output.css);
                }
              });
            case 'markdown':
            case 'md':
              return md(data, function(err, html) {
                if (err) {
                  res.writeHead(500, 'Syntax Error');
                  return res.end(err.toString());
                } else {
                  res.writeHead(200, {
                    'Content-TYpe': 'text/html'
                  });
                  return res.end(`<html>\n  <head>\n    <title>${file}</title>\n  </head>\n  <body>\n  ${html}\n  </body>\n</html>`);
                }
              });
            case 'coffee':
              try {
                result = coffee.compile(data);
              } catch (error) {
                err = error;
                res.writeHead(500, 'Syntax Error');
                return res.end(`Syntax Error: ${err.message} on line ${err.location.first_line}`);
              }
              res.writeHead(200, {
                'Content-TYpe': 'application/x-javascript'
              });
              return res.end(result);
            default:
              res.writeHead(501, 'Not Implemented');
              return res.end(`Unknown file suffix of "${suffix}"`);
          }
        }
      });
    }
  });

  // server.listen '/var/run/www/on-the-fly.sock'

  // server.listen 8000, 'localhost'
  server.autoQuit({
    timeOut: 60,
    exitFn: function() {
      log.info('server autoquit');
      return process.exit(0);
    }
  });

  log.info('server started');

  if (process.env.LISTEN_PID > 0) {
    server.listen('systemd');
  } else {
    server.listen(8000, 'localhost');
  }

}).call(this);
